
        // OLD CODE FOR WRITING CHUNK DATA TO THE SERVER
        // THIS WAS REMOVED BECAUSE MAP DATA IS STORED IN MEMORY BY THE GAME ( see Tile.Type[,] tiles in World.cs )
        // LOADING DIRECTLY FROM THE SERVER IS MUCH FASTER. ANY MODIFICATIONS TO TERRAIN BY PLAYERS WILL STILL BE STORED
        // ON THE SERVER AND LOADED WHEN ENTERING A CHUNK. JUST AT THE TIME OF TYPING THERE'S NO WAY OF MODIFYING TERRAIN.

        public static void RunQueryInsertBulk( int width, int height, double scale, int seed )
        {
            CommonSQL.DeleteTable( "terrain" );

            DataTable tbl = new DataTable();
            tbl.Columns.Add( new DataColumn( "TileX", typeof( int ) ) );
            tbl.Columns.Add( new DataColumn( "TileY", typeof( int ) ) );
            tbl.Columns.Add( new DataColumn( "Type", typeof( int ) ) );

            SharpNoise.NoiseMap noiseMap = MapGen.Generate(width, height, scale, true, seed);

            for ( int y = 0; y < height; y++ )
            {
                for ( int x = 0; x < width; x++ )
                {
                    DataRow dr = tbl.NewRow();
                    dr["TileX"] = x;
                    dr["TileY"] = y;
                    //dr["Type"] = (int)GetTypeByHeight( noiseMap[x, y] );

                    tbl.Rows.Add( dr );
                }
            }

            int i = GetConnectionFromPool();

            try
            {
                connectionPool[i].Open();

                MySqlCommand cmd = new MySqlCommand( "INSERT INTO terrain ( TileX, TileY, Type ) VALUES ( ?TileX, ?TileY, ?Type )"
                                                    , connectionPool[i] );
                //cmd.CommandType = CommandType.StoredProcedure;

                cmd.UpdatedRowSource = UpdateRowSource.None;

                cmd.Parameters.Add( "?TileX", MySqlDbType.Int32 ).SourceColumn = "TileX";
                cmd.Parameters.Add( "?TileY", MySqlDbType.Int32 ).SourceColumn = "TileY";
                cmd.Parameters.Add( "?Type", MySqlDbType.Int32 ).SourceColumn = "Type";

                MySqlDataAdapter da = new MySqlDataAdapter
                {
                    InsertCommand = cmd,
                    UpdateBatchSize = 512
                };

                Console.WriteLine( "\n\nGenerating... this may take a while" );

                int records = da.Update( tbl );
            }
            catch ( Exception e )
            {
                Console.WriteLine( "[SQLReader] " + "Query error: " + e.Message );
            }
            finally
            {
                if ( connectionPool[i].State == System.Data.ConnectionState.Open )
                {
                    connectionPool[i].Close();

                    Console.WriteLine( "[SQLReader] " + "Operation complete." );
                }
            }
        }